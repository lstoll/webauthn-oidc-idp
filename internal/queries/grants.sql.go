// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: grants.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cleanupExpiredGrants = `-- name: CleanupExpiredGrants :exec
DELETE FROM grants WHERE expires_at <= datetime('now')
`

func (q *Queries) CleanupExpiredGrants(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupExpiredGrants)
	return err
}

const createGrant = `-- name: CreateGrant :exec
INSERT INTO grants (id, auth_code, refresh_token, user_id, client_id, granted_scopes, request_data, expires_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateGrantParams struct {
	ID            uuid.UUID
	AuthCode      []byte
	RefreshToken  []byte
	UserID        string
	ClientID      string
	GrantedScopes string
	RequestData   []byte
	ExpiresAt     time.Time
}

func (q *Queries) CreateGrant(ctx context.Context, arg CreateGrantParams) error {
	_, err := q.db.ExecContext(ctx, createGrant,
		arg.ID,
		arg.AuthCode,
		arg.RefreshToken,
		arg.UserID,
		arg.ClientID,
		arg.GrantedScopes,
		arg.RequestData,
		arg.ExpiresAt,
	)
	return err
}

const expireGrant = `-- name: ExpireGrant :exec
UPDATE grants SET expires_at = datetime('now') WHERE id = ?
`

func (q *Queries) ExpireGrant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, expireGrant, id)
	return err
}

const getGrant = `-- name: GetGrant :one
SELECT id, auth_code, refresh_token, user_id, client_id, granted_scopes, request_data, created_at, expires_at
FROM grants
WHERE id = ? AND expires_at > datetime('now')
`

func (q *Queries) GetGrant(ctx context.Context, id uuid.UUID) (Grant, error) {
	row := q.db.QueryRowContext(ctx, getGrant, id)
	var i Grant
	err := row.Scan(
		&i.ID,
		&i.AuthCode,
		&i.RefreshToken,
		&i.UserID,
		&i.ClientID,
		&i.GrantedScopes,
		&i.RequestData,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getGrantByAuthCode = `-- name: GetGrantByAuthCode :one
SELECT id, auth_code, refresh_token, user_id, client_id, granted_scopes, request_data, created_at, expires_at
FROM grants
WHERE auth_code = ? AND expires_at > datetime('now')
`

func (q *Queries) GetGrantByAuthCode(ctx context.Context, authCode []byte) (Grant, error) {
	row := q.db.QueryRowContext(ctx, getGrantByAuthCode, authCode)
	var i Grant
	err := row.Scan(
		&i.ID,
		&i.AuthCode,
		&i.RefreshToken,
		&i.UserID,
		&i.ClientID,
		&i.GrantedScopes,
		&i.RequestData,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getGrantByRefreshToken = `-- name: GetGrantByRefreshToken :one
SELECT id, auth_code, refresh_token, user_id, client_id, granted_scopes, request_data, created_at, expires_at
FROM grants
WHERE refresh_token = ? AND expires_at > datetime('now')
`

func (q *Queries) GetGrantByRefreshToken(ctx context.Context, refreshToken []byte) (Grant, error) {
	row := q.db.QueryRowContext(ctx, getGrantByRefreshToken, refreshToken)
	var i Grant
	err := row.Scan(
		&i.ID,
		&i.AuthCode,
		&i.RefreshToken,
		&i.UserID,
		&i.ClientID,
		&i.GrantedScopes,
		&i.RequestData,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateGrant = `-- name: UpdateGrant :exec
UPDATE grants
SET auth_code = ?, refresh_token = ?, user_id = ?, client_id = ?, granted_scopes = ?, request_data = ?, expires_at = ?
WHERE id = ?
`

type UpdateGrantParams struct {
	AuthCode      []byte
	RefreshToken  []byte
	UserID        string
	ClientID      string
	GrantedScopes string
	RequestData   []byte
	ExpiresAt     time.Time
	ID            uuid.UUID
}

func (q *Queries) UpdateGrant(ctx context.Context, arg UpdateGrantParams) error {
	_, err := q.db.ExecContext(ctx, updateGrant,
		arg.AuthCode,
		arg.RefreshToken,
		arg.UserID,
		arg.ClientID,
		arg.GrantedScopes,
		arg.RequestData,
		arg.ExpiresAt,
		arg.ID,
	)
	return err
}
