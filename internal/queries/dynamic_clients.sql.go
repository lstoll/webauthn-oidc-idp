// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dynamic_clients.sql

package queries

import (
	"context"
	"time"
)

const cleanupExpiredDynamicClients = `-- name: CleanupExpiredDynamicClients :exec
DELETE FROM dynamic_clients 
WHERE expires_at <= datetime('now') OR active = FALSE
`

func (q *Queries) CleanupExpiredDynamicClients(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupExpiredDynamicClients)
	return err
}

const createDynamicClient = `-- name: CreateDynamicClient :exec
INSERT INTO dynamic_clients (
    id, client_secret_hash, registration_blob, expires_at
) VALUES (
    ?, ?, ?, ?
)
`

type CreateDynamicClientParams struct {
	ID               string
	ClientSecretHash string
	RegistrationBlob string
	ExpiresAt        time.Time
}

func (q *Queries) CreateDynamicClient(ctx context.Context, arg CreateDynamicClientParams) error {
	_, err := q.db.ExecContext(ctx, createDynamicClient,
		arg.ID,
		arg.ClientSecretHash,
		arg.RegistrationBlob,
		arg.ExpiresAt,
	)
	return err
}

const deactivateDynamicClient = `-- name: DeactivateDynamicClient :exec
UPDATE dynamic_clients 
SET active = FALSE 
WHERE id = ?
`

func (q *Queries) DeactivateDynamicClient(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deactivateDynamicClient, id)
	return err
}

const getDynamicClient = `-- name: GetDynamicClient :one
SELECT id, client_secret_hash, registration_blob, created_at, expires_at, active FROM dynamic_clients 
WHERE id = ? AND active = TRUE AND expires_at > datetime('now')
`

func (q *Queries) GetDynamicClient(ctx context.Context, id string) (DynamicClient, error) {
	row := q.db.QueryRowContext(ctx, getDynamicClient, id)
	var i DynamicClient
	err := row.Scan(
		&i.ID,
		&i.ClientSecretHash,
		&i.RegistrationBlob,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Active,
	)
	return i, err
}

const getDynamicClientBySecretHash = `-- name: GetDynamicClientBySecretHash :one
SELECT id, client_secret_hash, registration_blob, created_at, expires_at, active FROM dynamic_clients 
WHERE client_secret_hash = ? AND active = TRUE AND expires_at > datetime('now')
`

func (q *Queries) GetDynamicClientBySecretHash(ctx context.Context, clientSecretHash string) (DynamicClient, error) {
	row := q.db.QueryRowContext(ctx, getDynamicClientBySecretHash, clientSecretHash)
	var i DynamicClient
	err := row.Scan(
		&i.ID,
		&i.ClientSecretHash,
		&i.RegistrationBlob,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Active,
	)
	return i, err
}

const listActiveDynamicClients = `-- name: ListActiveDynamicClients :many
SELECT id, client_secret_hash, registration_blob, created_at, expires_at, active FROM dynamic_clients 
WHERE active = TRUE AND expires_at > datetime('now')
ORDER BY created_at DESC
`

func (q *Queries) ListActiveDynamicClients(ctx context.Context) ([]DynamicClient, error) {
	rows, err := q.db.QueryContext(ctx, listActiveDynamicClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DynamicClient
	for rows.Next() {
		var i DynamicClient
		if err := rows.Scan(
			&i.ID,
			&i.ClientSecretHash,
			&i.RegistrationBlob,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
