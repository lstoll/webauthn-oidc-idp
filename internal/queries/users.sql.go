// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package queries

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, full_name, enrollment_key, webauthn_handle, override_subject)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID              uuid.UUID
	Email           string
	FullName        string
	EnrollmentKey   sql.NullString
	WebauthnHandle  uuid.UUID
	OverrideSubject sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.EnrollmentKey,
		arg.WebauthnHandle,
		arg.OverrideSubject,
	)
	return err
}

const createUserCredential = `-- name: CreateUserCredential :exec
INSERT INTO credentials (id, user_id, name, credential_id, credential_data, created_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserCredentialParams struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Name           string
	CredentialID   []byte
	CredentialData []byte
	CreatedAt      time.Time
}

func (q *Queries) CreateUserCredential(ctx context.Context, arg CreateUserCredentialParams) error {
	_, err := q.db.ExecContext(ctx, createUserCredential,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.CredentialID,
		arg.CredentialData,
		arg.CreatedAt,
	)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, full_name, enrollment_key, override_subject, webauthn_handle FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.EnrollmentKey,
		&i.OverrideSubject,
		&i.WebauthnHandle,
	)
	return i, err
}

const getUserByOverrideSubject = `-- name: GetUserByOverrideSubject :one
SELECT id, email, full_name, enrollment_key, override_subject, webauthn_handle FROM users WHERE override_subject = ?
`

func (q *Queries) GetUserByOverrideSubject(ctx context.Context, overrideSubject sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByOverrideSubject, overrideSubject)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.EnrollmentKey,
		&i.OverrideSubject,
		&i.WebauthnHandle,
	)
	return i, err
}

const getUserByWebauthnHandle = `-- name: GetUserByWebauthnHandle :one
SELECT id, email, full_name, enrollment_key, override_subject, webauthn_handle FROM users WHERE webauthn_handle = ?
`

func (q *Queries) GetUserByWebauthnHandle(ctx context.Context, webauthnHandle uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByWebauthnHandle, webauthnHandle)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.EnrollmentKey,
		&i.OverrideSubject,
		&i.WebauthnHandle,
	)
	return i, err
}

const getUserCredentials = `-- name: GetUserCredentials :many
SELECT c.id, c.credential_id, c.user_id, c.name, c.credential_data, c.created_at FROM credentials c
JOIN users u ON c.user_id = u.id
WHERE u.id = ?
`

func (q *Queries) GetUserCredentials(ctx context.Context, id uuid.UUID) ([]Credential, error) {
	rows, err := q.db.QueryContext(ctx, getUserCredentials, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.ID,
			&i.CredentialID,
			&i.UserID,
			&i.Name,
			&i.CredentialData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, full_name, enrollment_key, override_subject, webauthn_handle FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FullName,
			&i.EnrollmentKey,
			&i.OverrideSubject,
			&i.WebauthnHandle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserEnrollmentKey = `-- name: SetUserEnrollmentKey :exec
UPDATE users SET enrollment_key = ? WHERE id = ?
`

func (q *Queries) SetUserEnrollmentKey(ctx context.Context, enrollmentKey sql.NullString, iD uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, setUserEnrollmentKey, enrollmentKey, iD)
	return err
}

const updateCredentialDataByCredentialID = `-- name: UpdateCredentialDataByCredentialID :exec
UPDATE credentials SET credential_data = ? WHERE credential_id = ?
`

func (q *Queries) UpdateCredentialDataByCredentialID(ctx context.Context, credentialData []byte, credentialID []byte) error {
	_, err := q.db.ExecContext(ctx, updateCredentialDataByCredentialID, credentialData, credentialID)
	return err
}
